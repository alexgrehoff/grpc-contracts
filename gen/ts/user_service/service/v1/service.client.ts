// @generated by protobuf-ts 2.2.2 with parameter long_type_string
// @generated from protobuf file "user_service/service/v1/service.proto" (package "user_service.service.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./service";
import type { UpdateUserResponse } from "./service";
import type { UpdateUserRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetUsersResponse } from "./service";
import type { GetUsersRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user_service.service.v1.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: GetUsers(user_service.service.v1.GetUsersRequest) returns (user_service.service.v1.GetUsersResponse);
     */
    getUsers(input: GetUsersRequest, options?: RpcOptions): UnaryCall<GetUsersRequest, GetUsersResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser(user_service.service.v1.UpdateUserRequest) returns (user_service.service.v1.UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse>;
}
/**
 * @generated from protobuf service user_service.service.v1.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetUsers(user_service.service.v1.GetUsersRequest) returns (user_service.service.v1.GetUsersResponse);
     */
    getUsers(input: GetUsersRequest, options?: RpcOptions): UnaryCall<GetUsersRequest, GetUsersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUsersRequest, GetUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(user_service.service.v1.UpdateUserRequest) returns (user_service.service.v1.UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserResponse>("unary", this._transport, method, opt, input);
    }
}
