// @generated by protobuf-ts 2.2.2 with parameter long_type_string
// @generated from protobuf file "user_service/service/v1/user.proto" (package "user_service.service.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message user_service.service.v1.User
 */
export interface User {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Account Type
     *
     * @generated from protobuf field: string account_type = 2;
     */
    accountType: string;
    /**
     * Phone Number
     *
     * @generated from protobuf field: string phone_number = 3;
     */
    phoneNumber: string;
    /**
     * Email
     *
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * Created At
     *
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
    /**
     * Updated At
     *
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
    /**
     * Locked To
     *
     * @generated from protobuf field: string locked_to = 7;
     */
    lockedTo: string;
    /**
     * Locked Comment
     *
     * @generated from protobuf field: string locked_comment = 8;
     */
    lockedComment: string;
    /**
     * Is Locked
     *
     * @generated from protobuf field: bool is_locked = 9;
     */
    isLocked: boolean;
    /**
     * Is Admin
     *
     * @generated from protobuf field: bool is_admin = 10;
     */
    isAdmin: boolean;
    /**
     * Is Active
     *
     * @generated from protobuf field: bool is_active = 11;
     */
    isActive: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("user_service.service.v1.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "locked_to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "locked_comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "is_locked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { id: "", accountType: "", phoneNumber: "", email: "", createdAt: "", updatedAt: "", lockedTo: "", lockedComment: "", isLocked: false, isAdmin: false, isActive: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string account_type */ 2:
                    message.accountType = reader.string();
                    break;
                case /* string phone_number */ 3:
                    message.phoneNumber = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                case /* string locked_to */ 7:
                    message.lockedTo = reader.string();
                    break;
                case /* string locked_comment */ 8:
                    message.lockedComment = reader.string();
                    break;
                case /* bool is_locked */ 9:
                    message.isLocked = reader.bool();
                    break;
                case /* bool is_admin */ 10:
                    message.isAdmin = reader.bool();
                    break;
                case /* bool is_active */ 11:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string account_type = 2; */
        if (message.accountType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountType);
        /* string phone_number = 3; */
        if (message.phoneNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phoneNumber);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        /* string locked_to = 7; */
        if (message.lockedTo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lockedTo);
        /* string locked_comment = 8; */
        if (message.lockedComment !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.lockedComment);
        /* bool is_locked = 9; */
        if (message.isLocked !== false)
            writer.tag(9, WireType.Varint).bool(message.isLocked);
        /* bool is_admin = 10; */
        if (message.isAdmin !== false)
            writer.tag(10, WireType.Varint).bool(message.isAdmin);
        /* bool is_active = 11; */
        if (message.isActive !== false)
            writer.tag(11, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.service.v1.User
 */
export const User = new User$Type();
